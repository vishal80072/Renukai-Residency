{"version":3,"file":"static/js/936.3ae19c2f.chunk.js","mappings":"yLAIA,IAJoB,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SACnB,OAAO,wBAAKA,GAChB,C,gMCFaC,EAAW,CAAC,UAAU,uxB,+BCa7BC,EAAgB,CAAC,8BACnB,kCACA,+BACA,+BACA,oCACA,4BACA,kCA+IJ,EA7IkB,WAEd,OAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACpB,GAAsDF,EAAAA,EAAAA,UAAS,IAAG,eAA3DG,EAAmB,KAAEC,EAAsB,KAClD,GAA4CJ,EAAAA,EAAAA,UAAS,IAAG,eAAjCK,GAAF,KAAmB,MAElCC,EAAkB,SAACC,GACrB,IAAMC,EAAQD,EAAMA,EAAME,OAAS,GAEnC,IADc,IAAIC,MAAOC,UACbH,EAGR,IAFA,IAAMI,EAAO,GACTC,EAAWL,EACNM,EAAI,EAAGA,EAAIf,EAAcU,OAAQK,IACtCF,EAAKG,KACD,IAAIL,KAAKM,IAAOH,GAAUI,IAAI,EAAG,MAAMN,WAE3CE,EAAWG,IAAOH,GAAUI,IAAI,EAAG,KAI3C,OAAOV,CACX,EAEMW,EAAU,yCAAG,uGAE6C,OAAtDC,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,aAAc,wBAAwB,EAAD,QACtCC,EAAAA,EAAAA,IAAOH,GAAQ,KAAD,EAIiC,OAJ/DI,EAAO,OACPhB,EAAQD,EAAgBiB,EAAQtB,OAAOuB,gBAC7CnB,EAAkBE,GAEZkB,GAAkBL,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,aAAc,wBAAwB,EAAD,QAC1CC,EAAAA,EAAAA,IAAOG,GAAiB,KAAD,EAA5CC,EAAY,OACZC,EAAmBD,EAAazB,OAAO2B,mBAC7CxB,EAAuBuB,GAEjBf,EAAO,GACTiB,EAAO,EACX9B,EAAc+B,SAAQ,SAAAC,GACbJ,EAAiBK,SAASD,KAC3BnB,EAAKG,KAAK,CACNgB,OAAQA,EACRE,KAAMjB,IAAOT,EAAMsB,IAAOK,OAAO,QAAU,KAAOlB,IAAOT,EAAMsB,IAAOK,OAAO,iBAEjFL,IAER,IACAF,EAAiBG,SAAQ,SAAAC,GACrBnB,EAAKG,KAAK,CACNgB,OAAQA,EACRE,KAAMjB,IAAOT,EAAMsB,IAAOK,OAAO,QAAU,KAAOlB,IAAOT,EAAMsB,IAAOK,OAAO,iBAEjFL,GACJ,IACA3B,EAAQU,GAAK,4CAChB,kBA/Be,mCAiCVuB,EAAoB,yCAAG,WAAOJ,GAAM,iFACjC5B,EAAoB6B,SAASD,GAAQ,CAAD,eAIoB,OAHnDnB,EAAOT,GACRY,KAAKgB,GAEJK,GAAMhB,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,aAAc,wBAAwB,EAAD,QACnDgB,EAAAA,EAAAA,IAAUD,EAAK,CACjBR,mBAAoBhB,IACrB,KAAD,EAEF0B,IAAAA,KAAU,CACNC,MAAO,UACPC,KAAM,+BACNC,KAAM,UACNC,mBAAoB,YACrBC,MAAK,WACJzB,GACJ,IAAE,2CAET,gBAnByB,sCA6C1B,OAJA0B,EAAAA,EAAAA,YAAU,WACN1B,GACJ,GAAG,KAEI,+BACH,UAAC,KAAK,CAAC2B,UAAU,OAAM,WACnB,SAAC,KAAW,CAACA,UAAU,iCAAgC,UACnD,SAACC,EAAA,EAAW,UAAC,kBAKjB,SAAC,KAAS,WACN,UAAC,KAAM,CAACC,SAAO,EAACF,UAAU,SAAQ,WAC9B,SAAC,IAAU,CAACG,MAAM,OAAM,UACpB,UAAC,KAAS,YACN,SAAC,KAAgB,CAACC,MAAM,MAAK,SAAC,YAC9B,SAAC,KAAgB,CAACA,MAAM,MAAK,SAAC,UAC9B,SAAC,KAAgB,CAACA,MAAM,MAAK,SAAC,iBAGtC,SAAC,KAAU,UACNhD,EAAKiD,KAAI,SAACC,EAAGrC,GAAC,OAAM,SAAC,EAAAsC,SAAQ,WAC1B,UAAC,KAAS,YACN,SAAC,KAAgB,CAACH,MAAM,MAAMJ,UAAU,oBAAmB,SACtDM,EAAEpB,UAEP,SAAC,KAAc,UACVoB,EAAElB,QAEP,SAAC,KAAc,WACX,SAAC,KAAO,CAACoB,QAAQ,UAAUC,QAAS,kBAAMnB,EAAqBgB,EAAEpB,OAAO,EAAEiB,MAAM,SAAQ,UACpF,SAAC,IAAK,CAACP,KAAM3C,YAVOgB,EAczB,eAMnC,C","sources":["components/PageHeading.js","../node_modules/@coreui/icons/js/free/cil-user-x.js","views/water-days/WaterDays.js"],"sourcesContent":["const PageHeading = ({ children }) => {\r\n    return <h5>{children}</h5>\r\n}\r\n\r\nexport default PageHeading","export const cilUserX = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M216,16A112.127,112.127,0,0,0,104,128v79.68a80.239,80.239,0,0,0,9.768,38.308l27.455,50.334L68.4,343.656A79.727,79.727,0,0,0,32,410.732V496H312V464H64V410.732a47.838,47.838,0,0,1,21.84-40.246L183.5,307.007l-41.64-76.341A48.149,48.149,0,0,1,136,207.68V128a80,80,0,0,1,160,0v79.68a48.143,48.143,0,0,1-5.861,22.985L248.5,307.007,312,348.283V310.117l-21.223-13.8,27.454-50.334A80.226,80.226,0,0,0,328,207.68V128A112.127,112.127,0,0,0,216,16Z' class='ci-primary'/><polygon fill='var(--ci-primary-color, currentColor)' points='483.314 355.314 460.686 332.686 412 381.372 363.314 332.686 340.686 355.314 389.372 404 340.686 452.686 363.314 475.314 412 426.628 460.686 475.314 483.314 452.686 434.628 404 483.314 355.314' class='ci-primary'/>\"]","import { CCard, CCardHeader, CCardBody, CCardTitle, CCardText, CRow, CCol, CTable, CTableHead, CTableRow, CTableHeaderCell, CTableBody, CTableDataCell, CButton } from '@coreui/react'\nimport PageHeading from '../../components/PageHeading'\nimport { WhatsappIcon } from 'react-share';\nimport { useEffect } from 'react';\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { db } from 'src/firebase/FirebaseProvider';\nimport { useState } from 'react';\nimport moment from 'moment/moment';\nimport CIcon from '@coreui/icons-react';\nimport { cilUserX } from '@coreui/icons';\nimport { Fragment } from 'react';\nimport Swal from 'sweetalert2';\n\nconst listOfMembers = [\"Shree. Ranjit Ranchhod Kale\",\n    \"Shree. Vilas Vaman Talele (Sir)\",\n    \"Shree. Chandan Aananda Patil\",\n    \"Shree. Rahul Kirtikumar Jain\",\n    \"Shree. Abhijit Shyamkant Kulkarni\",\n    \"Shree. Kunal Pandit Patil\",\n    \"Shree. Abhiman Pralhad Surgade\"]\n\nconst WaterDays = () => {\n\n    const [data, setData] = useState([])\n    const [notAvailableMembers, setNotAvailableMembers] = useState([])\n    const [availableDates, setAvailableDates] = useState([])\n\n    const getUpdatedDates = (dates) => {\n        const mili1 = dates[dates.length - 1]\n        const mili2 = new Date().getTime()\n        if (mili2 > mili1) {\n            const temp = []\n            let prevDate = mili1\n            for (var i = 0; i < listOfMembers.length; i++) {\n                temp.push(\n                    new Date(moment(prevDate).add(3, 'd')).getTime()\n                )\n                prevDate = moment(prevDate).add(3, 'd')\n            }\n            ///// HERE update the dates array and return new array\n        }\n        return dates\n    }\n\n    const updateDays = async () => {\n\n        const docRef = doc(db, \"water-days\", \"elWcmZ1gatVnwiqHJIJO\");\n        const docSnap = await getDoc(docRef);\n        const dates = getUpdatedDates(docSnap.data().availableDates)\n        setAvailableDates(dates)\n\n        const notAvailableRef = doc(db, \"water-days\", \"5WPZ5s20pvizja89MEhE\");\n        const notAvailable = await getDoc(notAvailableRef);\n        const tempNotAvailable = notAvailable.data().memberNotAvailable\n        setNotAvailableMembers(tempNotAvailable)\n\n        const temp = []\n        let loop = 0\n        listOfMembers.forEach(member => {\n            if (!tempNotAvailable.includes(member)) {\n                temp.push({\n                    member: member,\n                    date: moment(dates[loop]).format(\"dddd\") + \", \" + moment(dates[loop]).format(\"DD MMM YYYY\")\n                })\n                loop++\n            }\n        })\n        tempNotAvailable.forEach(member => {\n            temp.push({\n                member: member,\n                date: moment(dates[loop]).format(\"dddd\") + \", \" + moment(dates[loop]).format(\"DD MMM YYYY\")\n            })\n            loop++\n        })\n        setData(temp)\n    }\n\n    const onMemberNotAvailable = async (member) => {\n        if (!notAvailableMembers.includes(member)) {\n            const temp = notAvailableMembers\n            temp.push(member)\n\n            const ref = doc(db, \"water-days\", \"5WPZ5s20pvizja89MEhE\");\n            await updateDoc(ref, {\n                memberNotAvailable: temp\n            });\n\n            Swal.fire({\n                title: \"Success\",\n                text: \"Member removed successfully!\",\n                icon: \"success\",\n                confirmButtonColor: \"#006f95\"\n            }).then(() => {\n                updateDays()\n            })\n        }\n    }\n\n    const onDateJump = async () => {\n        const dates = {}\n        availableDates.forEach((x,i) => {\n            dates[i] = x\n        })\n\n        const { value: fruit } = await Swal.fire({\n            title: 'Select field validation',\n            input: 'select',\n            inputOptions: dates,\n            inputPlaceholder: 'Select a fruit',\n            showCancelButton: true,\n            confirmButtonColor: \"#006f95\"\n          })\n          \n          if (fruit) {\n            Swal.fire(`You selected: ${fruit}`)\n          }\n    }\n\n    useEffect(() => {\n        updateDays()\n    }, [])\n\n    return <>\n        <CCard className=\"mb-4\">\n            <CCardHeader className='d-flex justify-content-between'>\n                <PageHeading>\n                    Water Days\n                </PageHeading>\n                {/* <CButton variant=\"outline\" onClick={onDateJump}>Date Jump</CButton> */}\n            </CCardHeader>\n            <CCardBody>\n                <CTable striped className='border'>\n                    <CTableHead color='dark'>\n                        <CTableRow>\n                            <CTableHeaderCell scope=\"col\">Member</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\n                            <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                        </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                        {data.map((x, i) => (<Fragment key={i}>\n                            <CTableRow>\n                                <CTableHeaderCell scope=\"col\" className=\"text-primary text\">\n                                    {x.member}\n                                </CTableHeaderCell>\n                                <CTableDataCell>\n                                    {x.date}\n                                </CTableDataCell>\n                                <CTableDataCell>\n                                    <CButton variant=\"outline\" onClick={() => onMemberNotAvailable(x.member)} color=\"danger\">\n                                        <CIcon icon={cilUserX} />\n                                    </CButton>\n                                </CTableDataCell>\n                            </CTableRow>\n                        </Fragment>))}\n                    </CTableBody>\n                </CTable>\n            </CCardBody>\n        </CCard>\n    </>\n}\n\nexport default WaterDays"],"names":["children","cilUserX","listOfMembers","useState","data","setData","notAvailableMembers","setNotAvailableMembers","setAvailableDates","getUpdatedDates","dates","mili1","length","Date","getTime","temp","prevDate","i","push","moment","add","updateDays","docRef","doc","db","getDoc","docSnap","availableDates","notAvailableRef","notAvailable","tempNotAvailable","memberNotAvailable","loop","forEach","member","includes","date","format","onMemberNotAvailable","ref","updateDoc","Swal","title","text","icon","confirmButtonColor","then","useEffect","className","PageHeading","striped","color","scope","map","x","Fragment","variant","onClick"],"sourceRoot":""}