{"version":3,"file":"static/js/1883.926050b1.chunk.js","mappings":"+NAiFA,UA7Ec,WACZ,OACE,UAAC,KAAI,YACH,SAAC,KAAI,CAACA,GAAI,GAAG,UACX,UAAC,KAAK,CAACC,UAAU,OAAM,WACrB,UAAC,KAAW,YACV,4BAAQ,gBAAoB,KAAC,yBAE/B,UAAC,KAAS,YACR,eAAGA,UAAU,6BAA4B,UAAC,kBAC1B,0BAAM,yBAAyC,iBAAe,KAC5E,0BAAM,iBAAyB,QAEjC,UAAC,KAAW,CAACC,KAAK,cAAa,WAC7B,SAAC,KAAU,CAACC,QAAQ,eAAc,SAAC,mBACnC,SAAC,KAAU,CAACC,GAAG,6BAKvB,SAAC,KAAI,CAACJ,GAAI,GAAG,UACX,UAAC,KAAK,CAACC,UAAU,OAAM,WACrB,UAAC,KAAW,YACV,4BAAQ,gBAAoB,KAAC,2BAAO,iBAEtC,UAAC,KAAS,YACR,eAAGA,UAAU,6BAA4B,UAAC,YAChC,0BAAM,aAAe,mGAG/B,UAAC,KAAW,CAACC,KAAK,uBAAsB,WACtC,SAAC,KAAU,CAACC,QAAQ,gBAAe,SAAC,oBACpC,SAAC,KAAU,CAACC,GAAG,gBAAgBC,UAAQ,gBAK/C,SAAC,KAAI,CAACL,GAAI,GAAG,UACX,UAAC,KAAK,CAACC,UAAU,OAAM,WACrB,UAAC,KAAW,YACV,4BAAQ,gBAAoB,KAAC,2BAAO,oBAEtC,UAAC,KAAS,YACR,eAAGA,UAAU,6BAA4B,UAAC,0CACF,0BAAM,QAAU,SAAK,0BAAM,QAAU,UAC3E,0BAAM,MAAQ,SAAK,0BAAM,QAAW,mEACpB,0BAAM,QAAU,SAAK,0BAAM,QAAU,mBAEvD,UAAC,KAAW,CAACC,KAAK,0BAAyB,WACzC,SAAC,KAAU,CAACC,QAAQ,eAAc,SAAC,mBACnC,SAAC,KAAU,CAACG,IAAI,IAAIC,IAAI,IAAIC,aAAa,IAAIJ,GAAG,6BAKxD,SAAC,KAAI,CAACJ,GAAI,GAAG,UACX,UAAC,KAAK,CAACC,UAAU,OAAM,WACrB,UAAC,KAAW,YACV,4BAAQ,gBAAoB,KAAC,2BAAO,cAEtC,UAAC,KAAS,YACR,eAAGA,UAAU,6BAA4B,UAAC,yFAE9B,0BAAM,SAAW,yEAClB,0BAAM,eAAyB,QAE1C,UAAC,KAAW,CAACC,KAAK,oBAAmB,WACnC,SAAC,KAAU,CAACC,QAAQ,eAAc,SAAC,mBACnC,SAAC,KAAU,CAACG,IAAI,IAAIC,IAAI,IAAIE,KAAK,MAAMD,aAAa,IAAIJ,GAAG,8BAOzE,C","sources":["views/forms/range/Range.js"],"sourcesContent":["import React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormLabel, CFormRange, CRow } from '@coreui/react'\nimport { DocsExample } from 'src/components'\n\nconst Range = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small></small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Create custom <code>&lt;input type=&#34;range&#34;&gt;</code> controls with{' '}\n              <code>&lt;CFormRange&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/range\">\n              <CFormLabel htmlFor=\"customRange1\">Example range</CFormLabel>\n              <CFormRange id=\"customRange1\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\n              appearance and remove pointer events.\n            </p>\n            <DocsExample href=\"forms/range#disabled\">\n              <CFormLabel htmlFor=\"disabledRange\">Disabled range</CFormLabel>\n              <CFormRange id=\"disabledRange\" disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Min and max</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Range inputs have implicit values for <code>min</code> and <code>max</code>â€”\n              <code>0</code> and <code>100</code>, respectively. You may specify new values for\n              those using the <code>min</code> and <code>max</code> attributes.\n            </p>\n            <DocsExample href=\"forms/range#min-and-max\">\n              <CFormLabel htmlFor=\"customRange2\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" defaultValue=\"3\" id=\"customRange2\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Steps</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              By default, range inputs &#34;snap&#34; to integer values. To change this, you can\n              specify a <code>step</code> value. In the example below, we double the number of steps\n              by using <code>step=&#34;0.5&#34;</code>.\n            </p>\n            <DocsExample href=\"forms/range#steps\">\n              <CFormLabel htmlFor=\"customRange3\">Example range</CFormLabel>\n              <CFormRange min=\"0\" max=\"5\" step=\"0.5\" defaultValue=\"3\" id=\"customRange3\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Range\n"],"names":["xs","className","href","htmlFor","id","disabled","min","max","defaultValue","step"],"sourceRoot":""}