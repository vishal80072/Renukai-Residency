{"version":3,"file":"static/js/899.95bf838a.chunk.js","mappings":"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","sources":["components/PageHeading.js","views/water-days/WaterDays.js"],"sourcesContent":["const PageHeading = ({ children }) => {\r\n    return <h5>{children}</h5>\r\n}\r\n\r\nexport default PageHeading","import { CCard, CCardHeader, CCardBody, CCardTitle, CCardText, CRow, CCol, CTable, CTableHead, CTableRow, CTableHeaderCell, CTableBody, CTableDataCell, CButton } from '@coreui/react'\r\nimport PageHeading from '../../components/PageHeading'\r\nimport { WhatsappIcon } from 'react-share';\r\nimport { useEffect } from 'react';\r\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\r\nimport { db } from 'src/firebase/FirebaseProvider';\r\nimport { useState } from 'react';\r\nimport moment from 'moment/moment';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { cilUserX } from '@coreui/icons';\r\nimport { Fragment } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nconst listOfMembers = [\"Shree. Ranjit Ranchhod Kale\",\r\n    \"Shree. Vilas Vaman Talele (Sir)\",\r\n    \"Shree. Chandan Aananda Patil\",\r\n    \"Shree. Rahul Kirtikumar Jain\",\r\n    \"Shree. Abhijit Shyamkant Kulkarni\",\r\n    \"Shree. Kunal Pandit Patil\",\r\n    \"Shree. Abhiman Pralhad Surgade\"]\r\n\r\nconst WaterDays = () => {\r\n\r\n    const [data, setData] = useState([])\r\n    const [notAvailableMembers, setNotAvailableMembers] = useState([])\r\n    const [availableDates, setAvailableDates] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const getUpdatedDates = async (dates) => {\r\n        const mili1 = dates[dates.length - 1]\r\n        const mili2 = new Date().getTime()\r\n        if (mili2 > mili1) {\r\n            const temp = []\r\n            let prevDate = mili1\r\n            for (var i = 0; i < listOfMembers.length; i++) {\r\n                temp.push(\r\n                    new Date(moment(prevDate).add(3, 'd')).getTime()\r\n                )\r\n                prevDate = moment(prevDate).add(3, 'd')\r\n            }\r\n            // return temp\r\n            ///// HERE update the dates array and return new array\r\n            const ref = doc(db, \"water-days\", \"elWcmZ1gatVnwiqHJIJO\");\r\n            await updateDoc(ref, {\r\n                availableDates: temp\r\n            });\r\n            return temp\r\n        } else {\r\n            return dates\r\n        }\r\n    }\r\n\r\n    const updateDays = async () => {\r\n        setIsLoading(true)\r\n        const docRef = doc(db, \"water-days\", \"elWcmZ1gatVnwiqHJIJO\");\r\n        const docSnap = await getDoc(docRef);\r\n        const dates = await getUpdatedDates(docSnap.data().availableDates)\r\n        setAvailableDates(dates)\r\n\r\n        const notAvailableRef = doc(db, \"water-days\", \"5WPZ5s20pvizja89MEhE\");\r\n        const notAvailable = await getDoc(notAvailableRef);\r\n        const tempNotAvailable = notAvailable.data().memberNotAvailable\r\n        setNotAvailableMembers(tempNotAvailable)\r\n\r\n        const temp = []\r\n        let loop = 0\r\n        listOfMembers.forEach(member => {\r\n            if (!tempNotAvailable.includes(member)) {\r\n                temp.push({\r\n                    member: member,\r\n                    date: moment(dates[loop]).format(\"dddd\") + \", \" + moment(dates[loop]).format(\"DD MMM YYYY\")\r\n                })\r\n                loop++\r\n            }\r\n        })\r\n        tempNotAvailable.forEach(member => {\r\n            temp.push({\r\n                member: member,\r\n                date: moment(dates[loop]).format(\"dddd\") + \", \" + moment(dates[loop]).format(\"DD MMM YYYY\")\r\n            })\r\n            loop++\r\n        })\r\n        setData(temp)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const onMemberNotAvailable = async (member) => {\r\n        if (!notAvailableMembers.includes(member)) {\r\n            const temp = notAvailableMembers\r\n            temp.push(member)\r\n\r\n            const ref = doc(db, \"water-days\", \"5WPZ5s20pvizja89MEhE\");\r\n            await updateDoc(ref, {\r\n                memberNotAvailable: temp\r\n            });\r\n\r\n            Swal.fire({\r\n                title: \"Success\",\r\n                text: \"Member removed successfully!\",\r\n                icon: \"success\",\r\n                confirmButtonColor: \"#006f95\"\r\n            }).then(() => {\r\n                updateDays()\r\n            })\r\n        }\r\n    }\r\n\r\n    const onDateJump = async () => {\r\n        const dates = {}\r\n        availableDates.forEach((x, i) => {\r\n            dates[i] = x\r\n        })\r\n\r\n        const { value: fruit } = await Swal.fire({\r\n            title: 'Select field validation',\r\n            input: 'select',\r\n            inputOptions: dates,\r\n            inputPlaceholder: 'Select a fruit',\r\n            showCancelButton: true,\r\n            confirmButtonColor: \"#006f95\"\r\n        })\r\n\r\n        if (fruit) {\r\n            Swal.fire(`You selected: ${fruit}`)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateDays()\r\n    }, [])\r\n\r\n    return <>\r\n        <LoadingOverlay\r\n            active={isLoading}\r\n            spinner\r\n            text='Please wait...'\r\n        >\r\n            <CCard className=\"mb-4\">\r\n                <CCardHeader className='d-flex justify-content-between'>\r\n                    <PageHeading>\r\n                        Water Days\r\n                    </PageHeading>\r\n                    {/* <CButton variant=\"outline\" onClick={onDateJump}>Date Jump</CButton> */}\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CTable striped className='border'>\r\n                        <CTableHead color='dark'>\r\n                            <CTableRow>\r\n                                <CTableHeaderCell scope=\"col\">Member</CTableHeaderCell>\r\n                                <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\r\n                                {/* <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell> */}\r\n                            </CTableRow>\r\n                        </CTableHead>\r\n                        <CTableBody>\r\n                            {data.map((x, i) => (<Fragment key={i}>\r\n                                <CTableRow>\r\n                                    <CTableHeaderCell scope=\"col\" className=\"text-primary text\">\r\n                                        {x.member}\r\n                                    </CTableHeaderCell>\r\n                                    <CTableDataCell>\r\n                                        {x.date}\r\n                                    </CTableDataCell>\r\n                                    {/* <CTableDataCell>\r\n                                        <CButton variant=\"outline\" onClick={() => onMemberNotAvailable(x.member)} color=\"danger\">\r\n                                            <CIcon icon={cilUserX} />\r\n                                        </CButton>\r\n                                    </CTableDataCell> */}\r\n                                </CTableRow>\r\n                            </Fragment>))}\r\n                        </CTableBody>\r\n                    </CTable>\r\n                </CCardBody>\r\n            </CCard>\r\n        </LoadingOverlay>\r\n    </>\r\n}\r\n\r\nexport default WaterDays"],"names":["children","listOfMembers","useState","data","setData","setNotAvailableMembers","setAvailableDates","isLoading","setIsLoading","getUpdatedDates","dates","mili1","length","Date","getTime","temp","prevDate","i","push","moment","add","ref","doc","db","updateDoc","availableDates","updateDays","docRef","getDoc","docSnap","notAvailableRef","notAvailable","tempNotAvailable","memberNotAvailable","loop","forEach","member","includes","date","format","useEffect","active","spinner","text","className","striped","color","scope","map","x","Fragment"],"sourceRoot":""}