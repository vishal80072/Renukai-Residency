{"version":3,"file":"static/js/851.d83aa6d8.chunk.js","mappings":"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","sources":["components/PageHeading.js","views/profile/Profile.js"],"sourcesContent":["const PageHeading = ({ children }) => {\r\n    return <h5>{children}</h5>\r\n}\r\n\r\nexport default PageHeading","import {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardImage,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CSpinner,\n} from '@coreui/react'\nimport PageHeading from 'src/components/PageHeading'\nimport { useEffect, useState } from 'react'\nimport * as ProfilesData from './ProfileData'\nimport { addDoc, collection, doc, getDocs, query, updateDoc, where } from \"firebase/firestore\";\nimport { db } from 'src/firebase/FirebaseProvider';\nimport Swal from 'sweetalert2';\nimport LoadingOverlay from 'react-loading-overlay';\n\nconst Profile = () => {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"user\")))\n  const [userData, setUserData] = useState({ firstName: '', lastName: '', email: '', id: '' })\n  const [imageData, setImageData] = useState('');\n  const [isLoading, setIsLoading] = useState(false)\n  const [isOverlayLoading, setIsOverlayLoading] = useState(false)\n\n  const isMobileOrTablet = () => {\n    return /(android|iphone|ipad|mobile)/i.test(navigator.userAgent);\n  }\n\n  const onSave = async () => {\n    setIsOverlayLoading(true)\n    try {\n      if (userData.id !== \"\") {\n        const userRef = doc(db, \"users\", userData.id);\n        await updateDoc(userRef, {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          email: userData.email,\n          phoneNo: user.phoneNumber,\n          profile: imageData\n        });\n      } else {\n        await addDoc(collection(db, \"users\"), {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          email: userData.email,\n          phoneNo: user.phoneNumber,\n          profile: imageData\n        });\n      }\n      setIsOverlayLoading(false)\n      Swal.fire({\n        title: \"Success\",\n        text: \"Profile updated successfully!\",\n        icon: \"success\",\n        confirmButtonColor: \"#006f95\"\n      }).then(() => {\n        window.location.reload()\n      })\n    } catch (e) {\n      setIsOverlayLoading(false)\n      Swal.fire({\n        title: \"Failed\",\n        text: \"Failed to update profile try again!\",\n        icon: \"error\",\n        confirmButtonColor: \"#006f95\"\n      })\n    }\n\n  }\n\n  const uploadImage = (e) => {\n    const file = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = async (e) => {\n      const dataUrl = e.target.result\n      setImageData(dataUrl)\n    }\n    reader.readAsDataURL(file)\n  }\n\n  const loaduser = () => {\n    setIsLoading(true)\n    const q = query(collection(db, \"users\"), where(\"phoneNo\", \"==\", user.phoneNumber));\n    getDocs(q).then(rs => {\n      rs.forEach(doc => {\n        const obj = {\n          firstName: doc.data().firstName,\n          lastName: doc.data().lastName,\n          email: doc.data().email,\n          id: doc.id\n        }\n        setImageData(doc.data().profile)\n        setUserData(obj)\n      })\n      setIsLoading(false)\n    });\n  }\n\n  useEffect(() => {\n    loaduser()\n  }, []);\n\n  return <>\n    <LoadingOverlay\n      active={isOverlayLoading}\n      spinner\n      text='Please wait...'\n    >\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          <PageHeading>\n            Profile\n          </PageHeading>\n        </CCardHeader>\n        <CCardBody>\n          {isLoading ?\n            <div className='d-flex justify-content-center'>\n              <CSpinner color=\"primary\" variant=\"grow\" />\n            </div> :\n            <CForm className=\"row g-3\">\n              <CCol md={12} className=\"d-flex justify-content-center\">\n                {isMobileOrTablet() ? <CCardImage\n                  style={{ width: \"50%\" }}\n                  src={imageData}\n                /> :\n                  <CCardImage\n                    style={{ width: \"10%\" }}\n                    src={imageData}\n                  />}\n              </CCol>\n              <div className='d-flex justify-content-center pb-3' style={{ borderBottom: \"1px solid grey\" }}>\n                <CButton className='p-0 m-0 pt-1'><CFormLabel htmlFor=\"profile\" style={{ width: \"150px\" }}>Upload</CFormLabel></CButton>\n                <CFormInput hidden type=\"file\" id=\"profile\" onChange={uploadImage} />\n              </div>\n\n              <CCol md={6}>\n                <CFormLabel htmlFor=\"inputFirstName\">First Name</CFormLabel>\n                <CFormInput defaultValue={userData.firstName} onChange={e => setUserData({ ...userData, firstName: e.target.value })} type=\"text\" id=\"inputFirstName\" />\n              </CCol>\n              <CCol md={6}>\n                <CFormLabel htmlFor=\"inputLastName\">Last Name</CFormLabel>\n                <CFormInput defaultValue={userData.lastName} onChange={e => setUserData({ ...userData, lastName: e.target.value })} type=\"text\" id=\"inputLastName\" />\n              </CCol>\n              <CCol md={6}>\n                <CFormLabel htmlFor=\"inputEmail\">Email Address</CFormLabel>\n                <CFormInput defaultValue={userData.email} onChange={e => setUserData({ ...userData, email: e.target.value })} type=\"email\" id=\"inputEmail\" />\n              </CCol>\n              <CCol md={6}>\n                <CFormLabel htmlFor=\"inputMobil\">Mobile Number</CFormLabel>\n                <CFormInput value={user?.phoneNumber.replace(\"+91\", \"\")} type=\"text\" id=\"inputMobil\" />\n              </CCol>\n              <CCol xs={12} className=\"d-flex justify-content-center\">\n                <CButton className='w-25' onClick={onSave}>Save</CButton>\n              </CCol>\n            </CForm>}\n        </CCardBody>\n      </CCard>\n    </LoadingOverlay>\n  </>\n}\n\nexport default Profile"],"names":["children","useState","JSON","parse","localStorage","getItem","user","firstName","lastName","email","id","userData","setUserData","imageData","setImageData","isLoading","setIsLoading","isOverlayLoading","setIsOverlayLoading","onSave","userRef","doc","db","updateDoc","phoneNo","phoneNumber","profile","addDoc","collection","Swal","title","text","icon","confirmButtonColor","then","window","location","reload","useEffect","q","query","where","getDocs","rs","forEach","obj","data","loaduser","active","spinner","className","color","variant","md","test","navigator","userAgent","style","width","src","borderBottom","htmlFor","hidden","type","onChange","e","file","target","files","reader","FileReader","onload","dataUrl","result","readAsDataURL","defaultValue","value","replace","xs","onClick"],"sourceRoot":""}